# This policy uses the Sentinel tfplan import to validate that no security group
# rules have the CIDR "0.0.0.0/0".  It covers both the alicloud_security_group_rule.

##### Imports #####

import "tfplan"
import "strings"
import "types"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

	resources = {}

	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over the named resources of desired type in the module
		for tfplan.module(path).resources[type] else {} as name, instances {
			# Iterate over resource instances
			for instances as index, r {

				# Get the address of the instance
				if length(path) == 0 {
					# root module
					address = type + "." + name + "[" + string(index) + "]"
				} else {
					# non-root module
					address = "module." + strings.join(path, ".module.") + "." +
						type +
						"." +
						name +
						"[" +
						string(index) +
						"]"
				}

				# Add the instance to resources map, setting the key to the address
				resources[address] = r
			}
		}
	}

	return resources
}

# Validate that all Ali ingress security group rules
# do not have cidr_block 0.0.0.0/0
validate_cidr_blocks = func() {

	validated = true

	# Get all Ali security group rules
	sgr_instances = find_resources_from_plan("alicloud_security_group_rule")

	print(sgr_instances)

	# Loop through the resource instances
	for sgr_instances as address, r {

		# Skip resources that are being destroyed
		# to avoid unnecessary policy violations.
		# Used to be: if length(r.diff) == 0
		if r.destroy and not r.requires_new {
			print("Skipping security group rule", address, "that is being destroyed.")
			continue
		}

		# Determine if the attribute is computed
		if (r.diff["type"].computed else false or
			r.diff["cidr_ip.#"].computed else false) is
			true {
			print("Security group rule", address,
				"has attributes, type and/or cidr_ip that are computed.")
			# If you want computed values to cause the policy to fail,
			# uncomment the next line.
			# validated = false
		} else {
			# Validate that each SG rule does not have disallowed value
			# Since cidr_blocks is optional and could be computed,
			# We check that it is present and really a list
			# before checking whether it contains "0.0.0.0/0"
			if r.applied.type is "ingress" and
				r.applied.cidr_blocks else null is not null and
				types.type_of(r.applied.cidr_ip) is "list" and
				r.applied.cidr_blocks contains "0.0.0.0/0" {
				print("Security group rule", address, "of type ingress",
					"contains disallowed cidr_ip 0.0.0.0/0")
				validated = false
			}
		} // end computed check

	} // end security group rule instances

	return validated
}
##### Rules #####

# Call the validation function
sgrs_validated = validate_cidr_blocks()

# Main rule
main = rule {
	sgrs_validated
}
